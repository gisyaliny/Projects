cglcol = "grey30", cglty = 1, axislabcol = "grey30",
caxislabels = seq(0, 1, 0.1), cglwd = 1, calcex = 1.4,
# Custom labels
vlcex = 1.6
)
View(emotion_df)
View(emotion_df)
# Create a data frame with average scores for each emotion
emotion_averages <- data.frame(
anger = mean(sentiment_results$anger),
anticipation = mean(sentiment_results$anticipation),
disgust = mean(sentiment_results$disgust),
fear = mean(sentiment_results$fear),
joy = mean(sentiment_results$joy),
sadness = mean(sentiment_results$sadness),
surprise = mean(sentiment_results$surprise),
trust = mean(sentiment_results$trust)
)
# Add a row for the minimum value for each category for plotting
emotion_df <- rbind(rep(0, length(emotion_averages)), emotion_averages)
# Convert to data frame and add column names
colnames(emotion_df) <- names(emotion_averages)
emotion_df <- as.data.frame(emotion_df)
# Colors for the borders and fill of the polygons
colors_border <- "red"
colors_in <- "pink"
# Create the radar chart
fmsb::radarchart(emotion_averages)
# Library
library(fmsb)
# Create data: note in High school for Jonathan:
data <- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
colnames(data) <- c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data <- rbind(rep(20,10) , rep(0,10) , data)
# Check your data, it has to look like this!
# head(data)
# The default radar chart
radarchart(data)
data
emotion_averages
# Create a data frame with average scores for each emotion
emotion_averages <- data.frame(
anger = mean(sentiment_results$anger),
anticipation = mean(sentiment_results$anticipation),
disgust = mean(sentiment_results$disgust),
fear = mean(sentiment_results$fear),
joy = mean(sentiment_results$joy),
sadness = mean(sentiment_results$sadness),
surprise = mean(sentiment_results$surprise),
trust = mean(sentiment_results$trust)
)
# Add a row for the minimum value for each category for plotting
emotion_df <- rbind(rep(0, ncol(emotion_averages)),rep(1, ncol(emotion_averages)), emotion_averages)
# Colors for the borders and fill of the polygons
colors_border <- "red"
colors_in <- "pink"
# Create the radar chart
fmsb::radarchart(emotion_df)
fmsb::radarchart(emotion_df, axistype = 1,
#custom polygon
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
#custom labels
vlcex=1.4)
fmsb::radarchart(emotion_df, axistype = 1,
#custom polygon
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,1,5), cglwd=0.8,
#custom labels
vlcex=1.4)
# Create a data frame with average scores for each emotion
emotion_averages <- data.frame(
anger = mean(sentiment_results$anger),
anticipation = mean(sentiment_results$anticipation),
disgust = mean(sentiment_results$disgust),
fear = mean(sentiment_results$fear),
joy = mean(sentiment_results$joy),
sadness = mean(sentiment_results$sadness),
surprise = mean(sentiment_results$surprise),
trust = mean(sentiment_results$trust)
)
# Add a row for the minimum value for each category for plotting
emotion_df <- rbind(rep(0, ncol(emotion_averages)),rep(1, ncol(emotion_averages)), emotion_averages)
# Colors for the borders and fill of the polygons
colors_border <- "red"
colors_in <- "pink"
# Create the radar chart
fmsb::radarchart(emotion_df, axistype = 1,
#custom polygon
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,1,5), cglwd=0.8,
#custom labels
vlcex=1.4)
# Create a data frame with average scores for each emotion
emotion_averages <- data.frame(
Anger = mean(sentiment_results$anger),
Anticipation = mean(sentiment_results$anticipation),
Disgust = mean(sentiment_results$disgust),
Fear = mean(sentiment_results$fear),
Joy = mean(sentiment_results$joy),
Sadness = mean(sentiment_results$sadness),
Surprise = mean(sentiment_results$surprise),
Trust = mean(sentiment_results$trust)
)
# Add a row for the minimum value for each category for plotting
emotion_df <- rbind(rep(0, ncol(emotion_averages)),rep(1, ncol(emotion_averages)), emotion_averages)
# Colors for the borders and fill of the polygons
colors_border <- "red"
colors_in <- "pink"
# Create the radar chart
fmsb::radarchart(emotion_df, axistype = 1,
#custom polygon
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,1,5), cglwd=0.8,
#custom labels
vlcex=1.4)
# Create a data frame with average scores for each emotion
emotion_averages <- data.frame(
Anger = mean(sentiment_results$anger),
Anticipation = mean(sentiment_results$anticipation),
Disgust = mean(sentiment_results$disgust),
Fear = mean(sentiment_results$fear),
Joy = mean(sentiment_results$joy),
Sadness = mean(sentiment_results$sadness),
Surprise = mean(sentiment_results$surprise),
Trust = mean(sentiment_results$trust)
)
# Add a row for the minimum value for each category for plotting
emotion_df <- rbind(rep(0, ncol(emotion_averages)),rep(1, ncol(emotion_averages)), emotion_averages)
# Colors for the borders and fill of the polygons
colors_border <- "red"
colors_in <- "pink"
# Create the radar chart
fmsb::radarchart(emotion_df, axistype = 1,
#custom polygon
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,1,5), cglwd=0.8,
#custom labels
vlcex=1.3)
# Create a data frame with average scores for each emotion
emotion_averages <- data.frame(
Anger = mean(sentiment_results$anger),
Anticipation = mean(sentiment_results$anticipation),
Disgust = mean(sentiment_results$disgust),
Fear = mean(sentiment_results$fear),
Joy = mean(sentiment_results$joy),
Sadness = mean(sentiment_results$sadness),
Surprise = mean(sentiment_results$surprise),
Trust = mean(sentiment_results$trust)
)
# Add a row for the minimum value for each category for plotting
emotion_df <- rbind(rep(0, ncol(emotion_averages)),rep(1, ncol(emotion_averages)), emotion_averages)
# Create the radar chart
fmsb::radarchart(emotion_df, axistype = 1,
#custom polygon
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,1,5), cglwd=0.8,
#custom labels
vlcex=1.2)
# Chart
p <- ggplot(sentiment_results, aes(x=x) ) +
# Top
geom_density( aes(x = positive, y = ..density..), fill="#69b3a2" ) +
geom_label( aes(x=4.5, y=0.25, label="Positive"), color="#69b3a2") +
# Bottom
geom_density( aes(x = negative, y = -..density..), fill= "#404080") +
geom_label( aes(x=4.5, y=-0.25, label="Negative"), color="#404080") +
theme_ipsum() +
xlab("value of x")
library(data.table);library(textstem)
library(tm);library(syuzhet);library(ggplot2);library(hrbrthemes)
install.packages("hrbrthemes")
library(data.table);library(textstem)
library(tm);library(syuzhet);library(ggplot2);library(hrbrthemes)
# Chart
p <- ggplot(sentiment_results, aes(x=x) ) +
# Top
geom_density( aes(x = positive, y = ..density..), fill="#69b3a2" ) +
geom_label( aes(x=4.5, y=0.25, label="Positive"), color="#69b3a2") +
# Bottom
geom_density( aes(x = negative, y = -..density..), fill= "#404080") +
geom_label( aes(x=4.5, y=-0.25, label="Negative"), color="#404080") +
theme_ipsum() +
xlab("value of x")
p
# Chart
p <- ggplot(sentiment_results, aes(x=x) ) +
# Top
geom_density( aes(x = positive, y = ..density..), fill="#69b3a2" ) +
geom_label( aes(x=4.5, y=0.25, label="Positive"), color="#69b3a2") +
# Bottom
geom_density( aes(x = negative, y = -..density..), fill= "#404080") +
geom_label( aes(x=4.5, y=-0.25, label="Negative"), color="#404080") +
theme_ipsum() +
xlab("value of x")
p
# Chart
p <- ggplot(sentiment_results, aes(x=x) ) +
# Top
geom_density( aes(x = positive, y = ..density..), fill="#69b3a2" ) +
geom_label( aes(x=4.5, y=0.25, label="Positive"), color="#69b3a2") +
# Bottom
geom_density( aes(x = negative, y = -..density..), fill= "#404080") +
geom_label( aes(x=4.5, y=-0.25, label="Negative"), color="#404080") +
theme_ipsum() +
xlab("value of x")
p
# basic histogram
p <- ggplot(sentiment_results, aes(x=overall_sentiment)) +
geom_histogram()
# basic histogram
p <- ggplot(sentiment_results, aes(x=overall_sentiment)) +
geom_histogram()
p
# basic histogram
p <- ggplot(sentiment_results, aes(x=overall_sentiment)) +
geom_histogram(binwidth = 1)
p
# basic histogram
p <- ggplot(sentiment_results, aes(x=overall_sentiment)) +
geom_histogram(binwidth = 1, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
theme_ipsum()
p
# basic histogram
p <- ggplot(sentiment_results, aes(x=overall_sentiment)) +
geom_histogram(binwidth = 1, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
theme_ipsum()
p
# Chart
p <- ggplot(sentiment_results, aes(x=x) ) +
# Top
geom_density( aes(x = positive, y = ..density..), fill="#69b3a2" ) +
geom_label( aes(x=4.5, y=0.25, label="Positive"), color="#69b3a2") +
# Bottom
geom_density( aes(x = negative, y = -..density..), fill= "#404080") +
geom_label( aes(x=4.5, y=-0.25, label="Negative"), color="#404080") +
theme_ipsum() +
xlab("Tweets Sentimental Score")
p
# basic histogram
p <- ggplot(sentiment_results, aes(x=overall_sentiment)) +
geom_histogram(binwidth = 1, fill="#69b3a2", color="#e9ecef", alpha=0.9) +
theme_ipsum() +
xlab("Overall Sentimental Score")
p
## Word Cloud
tweets_words <-  test_result %>%
select(text_clean) %>%
unnest_tokens(word, text_clean)
library(data.table);library(textstem)
library(tm);library(syuzhet);library(ggplot2);library(hrbrthemes);library(wordcloud)
install.packages("wordcloud")
install.packages("wordcloud2")
## Word Cloud
tweets_words <-  test_result %>%
select(text_clean) %>%
unnest_tokens(word, text_clean)
library(data.table);library(textstem)
library(tm);library(syuzhet);library(ggplot2);library(hrbrthemes);library(wordcloud);library(wordcloud2)
## Word Cloud
tweets_words <-  test_result %>%
select(text_clean) %>%
unnest_tokens(word, text_clean)
## Word Cloud
# Create a corpus
docs <- Corpus(VectorSource(test_result$text_clean))
dtm <- TermDocumentMatrix(docs)
matrix <- as.matrix(dtm)
words <- sort(rowSums(matrix),decreasing=TRUE)
df_words <- data.frame(word = names(words),freq=words)
set.seed(1234) # for reproducibility
wordcloud(words = df_words$word, freq = df_words$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df_words$word, freq = df_words$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df_words$word, freq = df_words$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.15,
colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df_words$word, freq = df_words$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.15)
set.seed(1234) # for reproducibility
wordcloud(words = df_words$word, freq = df_words$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.15,
colors=brewer.pal(15, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df_words$word, freq = df_words$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.15,
colors=brewer.pal(8, "Set2"))
set.seed(1234) # for reproducibility
# wordcloud(words = df_words$word, freq = df_words$freq, min.freq = 1,
#           max.words=200, random.order=FALSE, rot.per=0.15,
#           colors=brewer.pal(8, "Set2"))
wordcloud2(data=df_words, size=1.6, color='random-dark')
set.seed(1234) # for reproducibility
# wordcloud(words = df_words$word, freq = df_words$freq, min.freq = 1,
#           max.words=200, random.order=FALSE, rot.per=0.15,
#           colors=brewer.pal(8, "Set2"))
wordcloud2(data=df_words, size=3, color='random-dark')
set.seed(1234) # for reproducibility
# wordcloud(words = df_words$word, freq = df_words$freq, min.freq = 1,
#           max.words=200, random.order=FALSE, rot.per=0.15,
#           colors=brewer.pal(8, "Set2"))
wordcloud2(data=df_words, size=4, color='random-dark')
set.seed(1234) # for reproducibility
# wordcloud(words = df_words$word, freq = df_words$freq, min.freq = 1,
#           max.words=200, random.order=FALSE, rot.per=0.15,
#           colors=brewer.pal(8, "Set2"))
wordcloud2(data=df_words, size=5, color='random-dark')
set.seed(1234) # for reproducibility
# wordcloud(words = df_words$word, freq = df_words$freq, min.freq = 1,
#           max.words=200, random.order=FALSE, rot.per=0.15,
#           colors=brewer.pal(8, "Set2"))
wordcloud2(data=df_words, size=3, color='random-dark')
set.seed(1234) # for reproducibility
# wordcloud(words = df_words$word, freq = df_words$freq, min.freq = 1,
#           max.words=200, random.order=FALSE, rot.per=0.15,
#           colors=brewer.pal(8, "Set2"))
wordcloud2(data=df_words, size=4, color='random-dark')
test_result$date
library(data.table);library(textstem);library(lubridate)
library(tm);library(syuzhet);library(ggplot2);library(hrbrthemes);library(wordcloud);library(wordcloud2)
test_result$date_parsed <- as.Date(strptime(test_result$date, format = "%a %b %d %H:%M:%S PDT %Y"))
summary(test_result$date_parsed)
test_result$overall_sentiment <- sentiment_results$overall_sentiment
daily_avg_sentiment <- aggregate(overall_sentiment ~ date_parsed, data = test_result, mean)
summary(daily_avg_sentiment)
ggplot(daily_avg_sentiment, aes(x = date_parsed, y = overall_sentiment)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Daily Average Overall Sentiment Score",
x = "Date",
y = "Average Sentiment Score") +
theme_minimal()
ggplot(daily_avg_sentiment, aes(x = date_parsed, y = overall_sentiment)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Daily Average Overall Sentiment Score",
x = "Date",
y = "Average Sentiment Score") +
theme_minimal()
model <- lm(overall_sentiment ~ date_parsed, data = daily_avg_sentiment)
slope <- coef(model)[2]
r_squared <- summary(model)$r.squared
# Annotate the plot with the slope and R^2 value
ggplot(daily_avg_sentiment, aes(x = date_parsed, y = overall_sentiment)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
annotate("text", x = Inf, y = Inf, hjust = 1.1, vjust = 1.1,
label = paste("Slope:", round(slope, 3), "\nR²:", round(r_squared, 3)),
size = 3) +
labs(title = "Daily Average Overall Sentiment Score",
x = "Date",
y = "Average Sentiment Score") +
theme_minimal()
model <- lm(overall_sentiment ~ date_parsed, data = daily_avg_sentiment)
slope <- coef(model)[2]
r_squared <- summary(model)$r.squared
ggplot(daily_avg_sentiment, aes(x = date_parsed, y = overall_sentiment)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
annotate("text", x = Inf, y = Inf, hjust = 1.1, vjust = 1.1,
label = paste("Slope:", round(slope, 3), "\nR²:", round(r_squared, 3)),
size = 3) +
labs(title = "Daily Average Overall Sentiment Score",
x = "Date",
y = "Average Sentiment Score") +
theme_minimal()
ggplot(daily_avg_sentiment, aes(x = date_parsed, y = overall_sentiment)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
annotate("text", x = Inf, y = Inf, hjust = 1.1, vjust = 1.1,
label = paste("Slope:", round(slope, 3), "\nR²:", round(r_squared, 3)),
size = 3) +
labs(title = "Daily Average Overall Sentiment Score",
x = "Date",
y = "Average Sentiment Score") +
theme_minimal()
ggplot(daily_avg_sentiment, aes(x = date_parsed, y = overall_sentiment)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Daily Average Overall Sentiment Score",
x = "Date",
y = "Average Sentiment Score") +
theme_minimal()
ggplot(daily_avg_sentiment, aes(x = date_parsed, y = overall_sentiment)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Daily Average Overall Sentiment Score",
x = "Date",
y = "Average Sentiment Score") +
theme_minimal() +
annotate("text", x = specific_date, y = specific_sentiment_score, label = "Your annotation here", hjust = 0, vjust = 0)
ggplot(daily_avg_sentiment, aes(x = date_parsed, y = overall_sentiment)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Daily Average Overall Sentiment Score",
x = "Date",
y = "Average Sentiment Score") +
theme_minimal()
# Fit a linear model
model <- lm(overall_sentiment ~ date_parsed, data = daily_avg_sentiment)
# Extract slope and R^2 value
slope <- coef(model)[2]
r_squared <- summary(model)$r.squared
# Your original ggplot code
p <- ggplot(daily_avg_sentiment, aes(x = date_parsed, y = overall_sentiment)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Daily Average Overall Sentiment Score",
x = "Date",
y = "Average Sentiment Score") +
theme_minimal()
# Add annotations for slope and R^2
p + annotate("text", x = quantile(daily_avg_sentiment$date_parsed,0.75), y = 1.2,
label = paste("Slope:", round(slope, 2), "R^2:", round(r_squared, 2)),
hjust = 0, vjust = 0)
quantile(daily_avg_sentiment$date_parsed,0.75)
daily_avg_sentiment$date_parsed
as.numeric(daily_avg_sentiment$date_parsed)
# Fit a linear model
model <- lm(overall_sentiment ~ date_parsed, data = daily_avg_sentiment)
# Extract slope and R^2 value
slope <- coef(model)[2]
r_squared <- summary(model)$r.squared
# Your original ggplot code
p <- ggplot(daily_avg_sentiment, aes(x = date_parsed, y = overall_sentiment)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Daily Average Overall Sentiment Score",
x = "Date",
y = "Average Sentiment Score") +
theme_minimal()
# Add annotations for slope and R^2
p + annotate("text", x = quantile(as.numeric(daily_avg_sentiment$date_parsed),0.75), y = 1.2,
label = paste("Slope:", round(slope, 2), "R^2:", round(r_squared, 2)),
hjust = 0, vjust = 0)
quantile(as.numeric(daily_avg_sentiment$date_parsed),0.75)
as.Date(quantile(as.numeric(daily_avg_sentiment$date_parsed),0.75))
# Fit a linear model
model <- lm(overall_sentiment ~ date_parsed, data = daily_avg_sentiment)
# Extract slope and R^2 value
slope <- coef(model)[2]
r_squared <- summary(model)$r.squared
# Your original ggplot code
p <- ggplot(daily_avg_sentiment, aes(x = date_parsed, y = overall_sentiment)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Daily Average Overall Sentiment Score",
x = "Date",
y = "Average Sentiment Score") +
theme_minimal()
# Add annotations for slope and R^2
p + annotate("text", x = as.Date(quantile(as.numeric(daily_avg_sentiment$date_parsed),0.75)), y = 1.2,
label = paste("Slope:", round(slope, 2), "R^2:", round(r_squared, 2)),
hjust = 0, vjust = 0)
coef(model)
# Fit a linear model
model <- lm(overall_sentiment ~ date_parsed, data = daily_avg_sentiment)
# Extract slope and R^2 value
slope <- coef(model)[2]
r_squared <- summary(model)$r.squared
# Your original ggplot code
p <- ggplot(daily_avg_sentiment, aes(x = date_parsed, y = overall_sentiment)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Daily Average Overall Sentiment Score",
x = "Date",
y = "Average Sentiment Score") +
theme_minimal()
# Add annotations for slope and R^2
p + annotate("text", x = as.Date(quantile(as.numeric(daily_avg_sentiment$date_parsed),0.75)), y = 1.2,
label = paste("Slope:", round(slope, 4), "\nR^2:", round(r_squared, 4)),
hjust = 0, vjust = 0)
# Fit a linear model
model <- lm(overall_sentiment ~ date_parsed, data = daily_avg_sentiment)
# Extract slope and R^2 value
slope <- coef(model)[2]
r_squared <- summary(model)$r.squared
# Your original ggplot code
p <- ggplot(daily_avg_sentiment, aes(x = date_parsed, y = overall_sentiment)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Daily Average Overall Sentiment Score",
x = "Date",
y = "Average Sentiment Score") +
theme_minimal()
# Add annotations for slope and R^2
p + annotate("text", x = as.Date(quantile(as.numeric(daily_avg_sentiment$date_parsed),0.75)), y = 1.2,
label = paste("Slope:", round(slope, 4), "\nR^2:", round(r_squared, 4)),
hjust = 0, vjust = 0)
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp('app2.R')
install.packages("shinycssloaders")
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
